package Client.Simulation.Context;

import java.util.List;

/**
 * Base for a simulation context series factory. It creates the infrastructure
 * for nothing more than the name of the game and the name of the tournament
 * system. See the {@link #Client.Simulation.Context.CombinatoricsFactory} for
 * a concrete implementation.
 * 
 * @author Tim Benedict Jagla {@literal <tim@acagamics.de>}
 */
public abstract class TournamentFactoryBase implements ITournamentFactory {

	/** A list of the names of the bots participating in this specific simulation series. */
	protected List<String> bots;
	/** Default builder #SimulationContext for a simulation generated by this factory. */
	protected GameContext.Builder builder;
	
	/**
	 * Constructor already sets gameName as well as tournamentSystem for convenience.
	 * @param bots A list of the names of the bots participating in the simulation series.
	 * @param gameName Identifier of the game to be played, possibly with a game mode extension.
	 */
	public TournamentFactoryBase(final List<String> bots, final String gameName) {
		this.bots = bots;
		this.builder = new GameContext.Builder()
			.gameName(gameName)
			.tournamentSystem(this.tournamentSystem());
	}
	
	/**
	 * Getter for the string identifying the tournament system.
	 * @return the string identifying the tournament system.
	 */
	abstract public String tournamentSystem();

}
